replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.25.3"
  command: [nginx-debug, '-g', 'daemon off;']

supplementaryImage:
  enabled: true
  repository: curlimages/curl
  tag: "latest"
  command: ["sh", "-c"]
  args:
    - |
      APISERVER=https://minikube:8443
      SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
      NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
      TOKEN=$(cat ${SERVICEACCOUNT}/token)
      CACERT=${SERVICEACCOUNT}/ca.crt
      while true; do
      cat << EOF > /homework/metrics.html
      <!DOCTYPE html><html lang="en"><head><title>Cluster Metrics</title></head><body>
      <h1>Kube metrics updated $(date) on $(hostname -s)</h1>
      $(curl -ks --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/metrics)
      </body></html>
      EOF
      sleep 5s; done

initImage:
  enabled: true
  repository: busybox
  tag: "1.28"
  command: ["sh", "-c"]
  args:             
    - |
      mkdir -p /init/homepage;
      cat << EOF > /init/index.html
      <!DOCTYPE html><html lang="en"><head><title>Homepage</title></head><body><h1>Homepage</h1></body></html>
      EOF
      ln -s /init/index.html /init/homepage/
  volumeMounts:
    - name: content
      mountPath: "/init"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
    kubernetes.io/enforce-mountable-secrets: "true"
  name: ""

monitoring:
  enabled: true

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 50%
    maxUnavailable: 1

podAnnotations: {}
podLabels: {}

persistence:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 50Mi

podSecurityContext: {}
  # fsGroup: 2000

# Additional volumes on the output Deployment definition.
# See config section variables for mapping name of configMap name
volumes:
  - name: content
    emptyDir: {}
    # persistentVolumeClaim:
      # claimName: mystorage
  - name: nginx-config 
    configMap:
      name: nginx-config-homework
      items:
          - key: nginx.conf
            path: nginx.conf
  - name: file-mount
    configMap:
      name: nginx-config-homework
      items:
          - key: test.conf
            path: test.conf

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: content
    mountPath: /homework
  - name: nginx-config
    mountPath: /etc/nginx
  - name: file-mount
    mountPath: homework/conf

config:
  enabled: true
  files:
    nginx.conf: |-
      user nginx;
      worker_processes  1;
      events {
        worker_connections  10240;
      }
      http {
        server {
            listen 8000;
            server_name localhost;

            location / {
              root /homework;
              index index.html;
            }

            location /conf/file/ {
              alias /homework/conf/;
              autoindex on;
            }
        }
      }
    test.conf: |
      host = 8.8.8.8
      port = 12345
  templates: []
  
existingSecret: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.allow-http: "true"
    # kubernetes.io/ingress.class: "nginx"
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/rewrite-target: /index.html
  hosts:
    - host: homework.otus
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    memory: "128Mi"
    cpu: "200m"
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
rbac:
  create: false
  pspEnabled: true

livenessProbe:
  httpGet:
    path: /index.html
    port: 8000

readinessProbe:
  httpGet:
    path: /metrics.html
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 360

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:
  homework: "true"

tolerations: []

affinity: {}

## namespaceOverride overrides the namespace which the resources will be deployed in
namespaceOverride: ""